import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv('env/bin/IMDb Movies India.csv', encoding='latin1')

print(df.head())

print(df.isnull().sum())

df = df.dropna()

df['Votes'] = pd.to_numeric(df['Votes'], errors='coerce')
df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce')

df['Year'] = df['Year'].str.extract('(\d+)').astype(int)

df = df.dropna(subset=['Votes', 'Rating'])

df = pd.get_dummies(df, columns=['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3'], drop_first=True)

print(df.head())

best_rating_year = df.groupby('Year')['Rating'].mean().idxmax()
print(f'Year with best rating: {best_rating_year}')

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Duration', y='Rating', data=df)
plt.title('Duration vs Rating')
plt.xlabel('Duration (minutes)')
plt.ylabel('Rating')
plt.show()

top_10_movies = df.sort_values(by='Rating', ascending=False).head(10)
print('Top 10 movies according to rating:')
print(top_10_movies[['Name', 'Year', 'Rating']])

plt.figure(figsize=(12, 8))
sns.barplot(x='Rating', y='Name', data=top_10_movies, palette='viridis')
plt.title('Top 10 Movies According to Rating')
plt.xlabel('Rating')
plt.ylabel('Movie Name')
plt.show()

popular_movies_per_year = df[df['Rating'] >= 8].groupby('Year').size()
print('Number of popular movies released each year:')
print(popular_movies_per_year)

plt.figure(figsize=(12, 8))
popular_movies_per_year.plot(kind='bar', color='skyblue')
plt.title('Number of Popular Movies Released Each Year')
plt.xlabel('Year')
plt.ylabel('Number of Popular Movies')
plt.show()

votes_rating_per_year = df.groupby('Year').agg({'Votes': 'mean', 'Rating': 'mean'}).reset_index()
print('Average votes and rating per year:')
print(votes_rating_per_year)

fig, ax1 = plt.subplots(figsize=(12, 8))

ax2 = ax1.twinx()
ax1.bar(votes_rating_per_year['Year'], votes_rating_per_year['Votes'], color='g')
ax2.plot(votes_rating_per_year['Year'], votes_rating_per_year['Rating'], color='b')

ax1.set_xlabel('Year')
ax1.set_ylabel('Average Votes', color='g')
ax2.set_ylabel('Average Rating', color='b')
plt.title('Average Votes and Rating per Year')
plt.show()

most_movies_director = df.filter(like='Director').sum().idxmax()
print(f'Director who directed the most movies: {most_movies_director}')

most_movies_actor = df.filter(like='Actor').sum().idxmax()
print(f'Actor who starred in the most movies: {most_movies_actor}')

df['Actor_Count'] = 3 

print(df.head())

df = df.select_dtypes(include=[np.number])

X = df.drop(columns=['Rating'])
y = df['Rating']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=3)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted Ratings')
plt.show()
